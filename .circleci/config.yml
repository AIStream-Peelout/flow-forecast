version: 2.1

orbs:
  codecov: codecov/codecov@1.0.2

executors:
  python-executor:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/repo


defaults: &defaults
  executor: python-executor
  working_directory: ~/repo

jobs:
  setup_and_install:
    <<: *defaults
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .
  linting:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
            python --version
            pip install flake8
            python -m flake8 .

  evaluator_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - restore_cache:  # ensure this step occrurs *before* installing dependencies
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
             pip install pipenv
             pip install coverage
             pip install --quiet --force-reinstall  --upgrade -r requirements.txt
             python setup.py develop --no-deps

      - save_cache:
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ~/.local

      - run:
          name: Evaluator tests
          when: always
          command: |
            coverage run -m unittest -v tests/test_deployment.py
            coverage run -m unittest -v tests/test_evaluation.py
            coverage run -m unittest -v tests/validation_loop_test.py
            coverage run -m unittest -v tests/test_handle_multi_crit.py

      - run:
          name: upload
          when: always
          command: bash <(curl -s https://codecov.io/bash) -cF python

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results
          destination: test-results-evaluator


  data_quality_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
             pip install pipenv
             pip install coverage
             pip install --force-reinstall --upgrade -r requirements.txt
             python setup.py develop --no-deps

      - save_cache:
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ~/.local

      - run:
          name: Data Quality Tests
          command: |
            coverage run -m unittest -v tests/test_multitask_decoder.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/data_format_tests.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/usgs_tests.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_join.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_preprocessing.py
            coverage run -m unittest -v tests/test_variable_length.py

      - run:
          name: upload_stuff
          when: always
          command: bash <(curl -s https://codecov.io/bash) -cF python

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results
          destination: test-results-data-quality

  model_basic_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
             pip install pipenv
             pip install coverage
             pip install --force-reinstall --upgrade --quiet -r requirements.txt
             python setup.py develop --no-deps

      - save_cache:
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ~/.local

      - run:
          name: Model basic tests
          when: always
          command: |
            coverage run -m unittest -v tests/multi_modal_tests/test_cross_vivit.py
            coverage run -m unittest -v tests/test_series_id.py
            coverage run -m unittest -v tests/test_squashed.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_attn.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_informer.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_meta_pr.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/time_model_test.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/data_loader_tests.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_da_rnn.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_loss.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_merging_models.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/pytorc_train_tests.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_classification2_loader.py
      - run:
          name: upload_stuff
          when: always
          command: bash <(curl -s https://codecov.io/bash) -cF python

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results
          destination: test-results-model-tests

  decoder_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
             pip install pipenv
             pip install coverage
             pip install --upgrade --force-reinstall --quiet -r requirements.txt
             python setup.py develop --no-deps

      - save_cache:
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ~/.local

      - run:
          name: Decoder tests
          when: always
          command: coverage run -m unittest -v tests/test_decoder.py

      - run:
          name: upload_stuff
          when: always
          command: bash <(curl -s https://codecov.io/bash) -cF python

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results
          destination: test-results-decoder


  trainer_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
             pip install pipenv
             pip install --force-reinstall --upgrade --quiet -r requirements.txt
             pip install coverage
             python setup.py develop --no-deps
      - save_cache:
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ~/.local

      - run:
          name: Trainer tests
          when: always
          command: |
            echo -e 'GRU Vanilla test'
            coverage run flood_forecast/trainer.py -p tests/gru_vanilla.json
            echo -e 'Running classification test'
            coverage run flood_forecast/trainer.py -p tests/classification_test.json
            echo -e 'Running informer single test'
            coverage run flood_forecast/trainer.py -p tests/test_inf_single.json
            echo -e 'Running transformer_gaussian test'
            coverage run flood_forecast/trainer.py -p tests/transformer_gaussian.json
            echo -e 'Running multi_decoder_test.json'
            coverage run flood_forecast/trainer.py -p tests/multi_decoder_test.json
            echo -e 'training multi-task-decoder'
            coverage run flood_forecast/trainer.py -p tests/multitask_decoder.json
            echo -e 'running da-meta data unit test'
            coverage run flood_forecast/trainer.py -p tests/da_meta.json
            echo -e 'running transformer bottleneck'
            coverage run flood_forecast/trainer.py -p tests/transformer_bottleneck.json
            echo -e 'running da_rnn probabilistic test'
            coverage run flood_forecast/trainer.py -p tests/da_rnn_probabilistic.json
            echo -e 'running lstm probabilistic test'
            coverage run flood_forecast/trainer.py -p tests/lstm_probabilistic_test.json
            echo -e 'running probabilistic linear reg test'
            coverage run flood_forecast/trainer.py -p tests/probabilistic_linear_regression_test.json
            echo -e 'running meta-data fusion'
            coverage run flood_forecast/trainer.py -p tests/meta_data_test.json

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results
          destination: test-results-trainer

      - run:
          name: upload results
          when: always
          command: bash <(curl -s https://codecov.io/bash) -cF python


  trainer_test1:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
             pip install pipenv
             pip install --force-reinstall --upgrade --quiet -r requirements.txt
             pip install coverage
             python setup.py develop --no-deps
      - save_cache:
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ~/.local

      - run:
          name: Trainer1 tests
          when: always
          command: |
            echo -e 'running test_informer \n'
            coverage run flood_forecast/trainer.py -p tests/test_informer.json
            echo -e 'running test_iTransformer \n'
            coverage run flood_forecast/trainer.py -p tests/test_iTransformer.json
            echo -e 'running tsmixer_test \n'
            coverage run flood_forecast/trainer.py -p tests/tsmixer_test.json
            echo -e 'running transformer_b_series.json \n'
            coverage run flood_forecast/trainer.py -p tests/transformer_b_series.json
            echo -e 'running crossfroer.json \n'
            coverage run flood_forecast/trainer.py -p tests/cross_former.json
            echo -e 'running nlinear.json \n'
            coverage run flood_forecast/trainer.py -p tests/nlinear.json
            echo -e 'running dsanet_3\n'
            coverage run flood_forecast/trainer.py -p tests/dsanet_3.json
            echo -e 'running variable_autoencoderl.json\n'
            coverage run flood_forecast/trainer.py -p tests/variable_autoencoderl.json
            echo -e 'running dlinear\n'
            coverage run flood_forecast/trainer.py -p tests/dlinear.json
            echo -e 'running custom_encode.json\n'
            coverage run flood_forecast/trainer.py -p tests/custom_encode.json
            echo -e 'running multi_decoder_test \n'
            coverage run flood_forecast/trainer.py -p tests/multi_decoder_test.json
            echo -e 'test_dual \n'
            coverage run flood_forecast/trainer.py -p tests/test_dual.json
            echo -e 'running dsanet \n'
            coverage run flood_forecast/trainer.py -p tests/dsanet.json

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results
          destination: test-results-trainer2

      - run:
          name: upload results
          when: always
          command: bash <(curl -s https://codecov.io/bash) -cF python

  trainer_test2:
      <<: *defaults
      steps:
        - attach_workspace:
            at: ~/repo
        - restore_cache:  # ensure this step occurs *before* installing dependencies
            key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}

        - run:
            name: install dependencies
            command: |
              pip install pipenv
              pip install --force-reinstall --upgrade --quiet -r requirements.txt
              pip install coverage
              python setup.py develop --no-deps
        - save_cache:
            key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}
            paths:
              - ~/.local

        - run:
            name: Trainer tests 2
            when: always
            command: |
              echo -e 'running trainer_lstm_test \n '
              coverage run flood_forecast/trainer.py -p tests/lstm_test.json
              echo -e 'running trainer_multi_test \n'
              coverage run flood_forecast/trainer.py -p tests/multi_test.json
              echo -e 'running trainer_full_transformer_test \n'
              coverage run flood_forecast/trainer.py -p  tests/full_transformer.json
              echo -e 'running da_rnn_test \n'
              coverage run flood_forecast/trainer.py -p tests/da_rnn.json
              echo -e 'running auto_encoder \n'
              coverage run flood_forecast/meta_train.py -p tests/auto_encoder.json
              echo -e 'running trainer_decoder_test   \n'
              coverage run flood_forecast/trainer.py -p tests/decoder_test.json
        - store_test_results:
            path: test-results

        - store_artifacts:
            path: test-results
            destination: test-results-trainer

        - run:
            name: upload results
            when: always
            command: bash <(curl -s https://codecov.io/bash) -cF python

  plot_test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
             pip install pipenv
             pip install coverage
             pip install --upgrade --force-reinstall --quiet -r requirements.txt
             python setup.py develop --no-deps

      - save_cache:
          key: requirements-v2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ~/.local

      - run:
          name: plot tests
          when: always
          command: |
            coverage run -m unittest -v tests/test_plot.py
            bash <(curl -s https://codecov.io/bash) -cF python
            coverage run -m unittest -v tests/test_explain_model_output.py
      - run:
          name: upload_stuff
          when: always
          command: bash <(curl -s https://codecov.io/bash) -cF python

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results
          destination: test-results-plot


workflows:
  version: 2

  test_and_build:
    jobs:
      - setup_and_install
      - linting:
          requires:
            - setup_and_install
      - evaluator_test:
          requires:
            - setup_and_install
      - data_quality_test:
          requires:
            - setup_and_install
      - model_basic_test:
          requires:
           - setup_and_install
      - decoder_test:
          requires:
            - setup_and_install
      - trainer_test:
          requires:
            - linting
      - plot_test:
          requires:
            - setup_and_install
      - trainer_test1:
          requires:
            - setup_and_install
      - trainer_test2:
          requires:
            - setup_and_install
